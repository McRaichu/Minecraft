// Date: 04.10.2015 22:47:57
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package com.mcraichu.obeliskoflight.stealthtank;

import org.lwjgl.opengl.GL11;

import net.minecraft.block.Block;
import net.minecraft.client.Minecraft;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.block.model.ItemCameraTransforms;
import net.minecraft.entity.Entity;
import net.minecraft.item.Item;
import net.minecraft.item.ItemBlock;
import net.minecraft.item.ItemStack;
import net.minecraft.util.Vec3;

public class ModelStealthTank extends ModelBase
{

	protected boolean isAttacking = false;

	protected double distanceMovedTotal = 0.0D;

	protected double prevDistanceMovedTotal = 0.0D;


	// don't make this too large or animations will be skipped
	protected static final double CYCLES_PER_BLOCK = 1.7D; 
	protected static final int MOTIONLESS_LIMIT = 16; 
	protected int cycleIndex = 0;	

	protected float[][] walkingCycle = new float[][]
			{
			/*
			 * leg, clawX, clawY
			 * */	

			{ 0F, -70F, 30F },
			{ 45F, -70F, 30F },
			{ 90F, -70F, 30F },
			{ 135F, -70F, 30F },
			{ 180F, -70F, 30F },
			{ 225F, -70F, 30F },
			{ 270F, -70F, 30F },
			{ 315F, -70F, 30F },
			};


	//fields
	ModelRenderer Body;
	ModelRenderer Window;
	ModelRenderer RocketLauncher;
	ModelRenderer LeftBackLeg1;
	ModelRenderer LeftBackLeg2;
	ModelRenderer RightBackLeg1;
	ModelRenderer RightBackLeg2;
	ModelRenderer LeftLeg1;
	ModelRenderer LeftLeg2;
	ModelRenderer RightLeg1;
	ModelRenderer RightLeg2;
	ModelRenderer LeftBackWheel1;
	ModelRenderer LeftBackWheel2;
	ModelRenderer LeftBackWheel3;
	ModelRenderer RightBackWheel1;
	ModelRenderer RightBackWheel2;
	ModelRenderer RightBackWheel3;
	ModelRenderer LeftWheel1;
	ModelRenderer LeftWheel2;
	ModelRenderer LeftWheel3;
	ModelRenderer RightWheel1;
	ModelRenderer RightWheel2;
	ModelRenderer RightWheel3;

	public ModelStealthTank()
	{
		textureWidth = 64;
		textureHeight = 64;

		Body = new ModelRenderer(this, 0, 0);
		Body.addBox(-8F, -2F, -8F, 16, 4, 16);
		Body.setRotationPoint(0F, 16F, 0F);
		Body.setTextureSize(64, 64);
		Body.mirror = true;
		setRotation(Body, 0F, 0F, 0F);
		Window = new ModelRenderer(this, 30, 21);
		Window.addBox(-6F, -6.5F, -8F, 12, 3, 3);
		Window.setRotationPoint(0F, 16F, 0F);
		Window.setTextureSize(64, 64);
		Window.mirror = true;
		setRotation(Window, 0.715585F, 0F, 0F);
		RocketLauncher = new ModelRenderer(this, 26, 30);
		RocketLauncher.addBox(-5F, -5F, -4F, 10, 3, 9);
		RocketLauncher.setRotationPoint(0F, 16F, 0F);
		RocketLauncher.setTextureSize(64, 64);
		RocketLauncher.mirror = true;
		setRotation(RocketLauncher, 0F, 0F, 0F);
		LeftBackLeg1 = new ModelRenderer(this, 0, 45);
		LeftBackLeg1.addBox(7F, -2F, 5F, 2, 2, 8);
		LeftBackLeg1.setRotationPoint(0F, 16F, 0F);
		LeftBackLeg1.setTextureSize(64, 64);
		LeftBackLeg1.mirror = true;
		setRotation(LeftBackLeg1, -0.4363323F, 0F, 0F);
		LeftBackLeg2 = new ModelRenderer(this, 0, 30);
		LeftBackLeg2.addBox(8F, 2F, 10F, 6, 4, 6);
		LeftBackLeg2.setRotationPoint(0F, 16F, 0F);
		LeftBackLeg2.setTextureSize(64, 64);
		LeftBackLeg2.mirror = true;
		setRotation(LeftBackLeg2, 0F, 0F, 0F);
		RightBackLeg1 = new ModelRenderer(this, 0, 45);
		RightBackLeg1.addBox(-9F, -2F, 5F, 2, 2, 8);
		RightBackLeg1.setRotationPoint(0F, 16F, 0F);
		RightBackLeg1.setTextureSize(64, 64);
		RightBackLeg1.mirror = true;
		setRotation(RightBackLeg1, -0.4363323F, 0F, 0F);
		RightBackLeg2 = new ModelRenderer(this, 0, 30);
		RightBackLeg2.addBox(-14F, 2F, 10F, 6, 4, 6);
		RightBackLeg2.setRotationPoint(0F, 16F, 0F);
		RightBackLeg2.setTextureSize(64, 64);
		RightBackLeg2.mirror = true;
		setRotation(RightBackLeg2, 0F, 0F, 0F);
		LeftLeg1 = new ModelRenderer(this, 0, 45);
		LeftLeg1.addBox(7F, -2F, -12F, 2, 2, 8);
		LeftLeg1.setRotationPoint(0F, 16F, 0F);
		LeftLeg1.setTextureSize(64, 64);
		LeftLeg1.mirror = true;
		setRotation(LeftLeg1, 0.4363323F, 0F, 0F);
		LeftLeg2 = new ModelRenderer(this, 0, 30);
		LeftLeg2.addBox(8F, 2F, -16F, 6, 4, 6);
		LeftLeg2.setRotationPoint(0F, 16F, 0F);
		LeftLeg2.setTextureSize(64, 64);
		LeftLeg2.mirror = true;
		setRotation(LeftLeg2, 0F, 0F, 0F);
		RightLeg1 = new ModelRenderer(this, 0, 45);
		RightLeg1.addBox(-9F, -2F, -12F, 2, 2, 8);
		RightLeg1.setRotationPoint(0F, 16F, 0F);
		RightLeg1.setTextureSize(64, 64);
		RightLeg1.mirror = true;
		setRotation(RightLeg1, 0.4363323F, 0F, 0F);
		RightLeg2 = new ModelRenderer(this, 0, 30);
		RightLeg2.addBox(-14F, 2F, -16F, 6, 4, 6);
		RightLeg2.setRotationPoint(0F, 16F, 0F);
		RightLeg2.setTextureSize(64, 64);
		RightLeg2.mirror = true;
		setRotation(RightLeg2, 0F, 0F, 0F);
		LeftBackWheel1 = new ModelRenderer(this, 0, 21);
		LeftBackWheel1.addBox(-2F, -2F, -1F, 4, 4, 2);
		LeftBackWheel1.setRotationPoint(11F, 22F, 13F);
		LeftBackWheel1.setTextureSize(64, 64);
		LeftBackWheel1.mirror = true;
		setRotation(LeftBackWheel1, 0F, 0F, 0F);
		LeftBackWheel2 = new ModelRenderer(this, 0, 21);
		LeftBackWheel2.addBox(-2F, -1F, -2F, 4, 2, 1);
		LeftBackWheel2.setRotationPoint(11F, 22F, 13F);
		LeftBackWheel2.setTextureSize(64, 64);
		LeftBackWheel2.mirror = true;
		setRotation(LeftBackWheel2, 0F, 0F, 0F);
		LeftBackWheel3 = new ModelRenderer(this, 0, 21);
		LeftBackWheel3.addBox(-2F, -1F, 1F, 4, 2, 1);
		LeftBackWheel3.setRotationPoint(11F, 22F, 13F);
		LeftBackWheel3.setTextureSize(64, 64);
		LeftBackWheel3.mirror = true;
		setRotation(LeftBackWheel3, 0F, 0F, 0F);
		RightBackWheel1 = new ModelRenderer(this, 0, 21);
		RightBackWheel1.addBox(-2F, -2F, -1F, 4, 4, 2);
		RightBackWheel1.setRotationPoint(-11F, 22F, 13F);
		RightBackWheel1.setTextureSize(64, 64);
		RightBackWheel1.mirror = true;
		setRotation(RightBackWheel1, 0F, 0F, 0F);
		RightBackWheel2 = new ModelRenderer(this, 0, 21);
		RightBackWheel2.addBox(-2F, -1F, -2F, 4, 2, 1);
		RightBackWheel2.setRotationPoint(-11F, 22F, 13F);
		RightBackWheel2.setTextureSize(64, 64);
		RightBackWheel2.mirror = true;
		setRotation(RightBackWheel2, 0F, 0F, 0F);
		RightBackWheel3 = new ModelRenderer(this, 0, 21);
		RightBackWheel3.addBox(-2F, -1F, 1F, 4, 2, 1);
		RightBackWheel3.setRotationPoint(-11F, 22F, 13F);
		RightBackWheel3.setTextureSize(64, 64);
		RightBackWheel3.mirror = true;
		setRotation(RightBackWheel3, 0F, 0F, 0F);
		LeftWheel1 = new ModelRenderer(this, 0, 21);
		LeftWheel1.addBox(-2F, -2F, -1F, 4, 4, 2);
		LeftWheel1.setRotationPoint(11F, 22F, -13F);
		LeftWheel1.setTextureSize(64, 64);
		LeftWheel1.mirror = true;
		setRotation(LeftWheel1, 0F, 0F, 0F);
		LeftWheel2 = new ModelRenderer(this, 0, 21);
		LeftWheel2.addBox(-2F, -1F, -2F, 4, 2, 1);
		LeftWheel2.setRotationPoint(11F, 22F, -13F);
		LeftWheel2.setTextureSize(64, 64);
		LeftWheel2.mirror = true;
		setRotation(LeftWheel2, 0F, 0F, 0F);
		LeftWheel3 = new ModelRenderer(this, 0, 21);
		LeftWheel3.addBox(-2F, -1F, 1F, 4, 2, 1);
		LeftWheel3.setRotationPoint(11F, 22F, -13F);
		LeftWheel3.setTextureSize(64, 64);
		LeftWheel3.mirror = true;
		setRotation(LeftWheel3, 0F, 0F, 0F);
		RightWheel1 = new ModelRenderer(this, 0, 21);
		RightWheel1.addBox(-2F, -2F, -1F, 4, 4, 2);
		RightWheel1.setRotationPoint(-11F, 22F, -13F);
		RightWheel1.setTextureSize(64, 64);
		RightWheel1.mirror = true;
		setRotation(RightWheel1, 0F, 0F, 0F);
		RightWheel2 = new ModelRenderer(this, 0, 21);
		RightWheel2.addBox(-2F, -1F, -2F, 4, 2, 1);
		RightWheel2.setRotationPoint(-11F, 22F, -13F);
		RightWheel2.setTextureSize(64, 64);
		RightWheel2.mirror = true;
		setRotation(RightWheel2, 0F, 0F, 0F);
		RightWheel3 = new ModelRenderer(this, 0, 21);
		RightWheel3.addBox(-2F, -1F, 1F, 4, 2, 1);
		RightWheel3.setRotationPoint(-11F, 22F, -13F);
		RightWheel3.setTextureSize(64, 64);
		RightWheel3.mirror = true;
		setRotation(RightWheel3, 0F, 0F, 0F);
		
		convertToChild(LeftBackWheel1, LeftBackWheel2);
		convertToChild(LeftBackWheel1, LeftBackWheel3);

		convertToChild(RightBackWheel1, RightBackWheel2);
		convertToChild(RightBackWheel1, RightBackWheel3);

		convertToChild(LeftWheel1, LeftWheel2);
		convertToChild(LeftWheel1, LeftWheel3);
		convertToChild(RightWheel1, RightWheel2);
		convertToChild(RightWheel1, RightWheel3);
		
		convertToChild(Body, LeftBackWheel1);
		convertToChild(Body, LeftWheel1);
		convertToChild(Body, RightBackWheel1);
		convertToChild(Body, RightWheel1);
		
		convertToChild(Body, LeftBackLeg1);
		convertToChild(Body, LeftLeg1);
		convertToChild(Body, RightBackLeg1);
		convertToChild(Body, RightLeg1);
		
		convertToChild(Body, LeftBackLeg2);
		convertToChild(Body, LeftLeg2);
		convertToChild(Body, RightBackLeg2);
		convertToChild(Body, RightLeg2);
		
		convertToChild(Body, Window);
		convertToChild(Body, RocketLauncher);
		
		
		
	}
	@Override
	public void render(Entity parEntity, float parTime, float parSwingSuppress, float par4, float parHeadAngleY, float parHeadAngleX, float par7)
	{
		renderStealthTank((StealthTank) parEntity, parTime, parSwingSuppress, par4, parHeadAngleY, parHeadAngleX, par7);
	}

	public void renderStealthTank(StealthTank parEntity, float parTime, float parSwingSuppress, float par4, float parHeadAngleY, float parHeadAngleX, float par7) {

		//		super.render(parEntity, f, f1, f2, f3, f4, f5);
		//		setRotationAngles(f, f1, f2, f3, f4, f5, parEntity);

		isAttacking = false;

		setRotationAngles(parTime, parSwingSuppress, par4, parHeadAngleY, parHeadAngleX, par7, parEntity);

		GL11.glPushMatrix();
		//      GL11.glScalef(1.1F,1.1F,1.1F);
		GlStateManager.translate(0.0,0.0,0.0);
		GL11.glScalef(1.0F,1.0F,1.0F);

		//System.out.println("-----------------------renderAtlas()");

		Body.render(par7);

//		GlStateManager.popMatrix();
//		
//		GL11.glPushMatrix();
//		
//		if (parEntity.getAttacking())
//		{
//			float temp = parEntity.getRotationYawHead();
//			float temp2 = parEntity.rotationYawHead;
//			float temp3 = parEntity.rotationYaw;
//			float temp4 = temp3-temp2;
//			GlStateManager.rotate(temp4, 0.0F, 1.0F, 0.0F);
//			setRotation(RocketLauncher, 0F, temp4, 0F);
//		}
//		//this.RocketLauncher.render(par7);
		
//		
//		this.RocketLauncher.postRender(1.0F);
		
		
		GlStateManager.popMatrix();
		

	}

	private void setRotation(ModelRenderer model, float x, float y, float z) {
		model.rotateAngleX = x;
		model.rotateAngleY = y;
		model.rotateAngleZ = z;
	}

	@Override
	public void setRotationAngles(float parTime, float parSwingSuppress, float par3, float parHeadAngleY, float parHeadAngleX, float par6, Entity parEntity)
	{
		updateDistanceMovedTotal(parEntity);

		cycleIndex = 0; //(int) ((getDistanceMovedTotal(parEntity)*CYCLES_PER_BLOCK)%walkingCycle.length);


		cycleIndex = (int) ((getDistanceMovedTotal(parEntity)*CYCLES_PER_BLOCK)%walkingCycle.length);
		if(getDistanceMovedTotal(parEntity) < 0.05)
		{
			cycleIndex = 0;
		}


		//        else if(!useStartingCycle)
		//        {
		//        	cycleIndex = 6;
		//        }

		// DEBUG
		//System.out.println("ModelSerpent setRotationAngles(), distanceMoved ="+getDistanceMovedTotal(parEntity)+", cycleIndex ="+cycleIndex+", motionX ="+parEntity.motionX);

		/*
		 * wheels
		 * */	

		LeftWheel1.rotateAngleX = degToRad(walkingCycle[cycleIndex][0]) ;
		LeftBackWheel1.rotateAngleX = degToRad(walkingCycle[cycleIndex][0]) ;
		RightWheel1.rotateAngleX = degToRad(walkingCycle[cycleIndex][0]) ;
		RightBackWheel1.rotateAngleX = degToRad(walkingCycle[cycleIndex][0]) ;

	}

	protected void updateDistanceMovedTotal(Entity parEntity) 
	{
		prevDistanceMovedTotal = distanceMovedTotal;
		distanceMovedTotal += parEntity.getDistance(parEntity.prevPosX, parEntity.prevPosY, parEntity.prevPosZ);
	}

	protected double getDistanceMovedTotal(Entity parEntity) 
	{
		return (distanceMovedTotal);
	}

	protected float degToRad(float degrees)
	{
		return degrees * (float)Math.PI / 180 ;
	}

	protected void setRotationDeg(ModelRenderer model, float rotX, float rotY, float rotZ)
	{
		model.rotateAngleX = degToRad(rotX);
		model.rotateAngleY = degToRad(rotY);
		model.rotateAngleZ = degToRad(rotZ);        
	}

	// This is really useful for converting the source from a Techne model
	// export
	// which will have absolute rotation points that need to be converted before
	// creating the addChild() relationship
	protected void convertToChild(ModelRenderer parParent,
			ModelRenderer parChild) {
		// move child rotation point to be relative to parent
		parChild.rotationPointX -= parParent.rotationPointX;
		parChild.rotationPointY -= parParent.rotationPointY;
		parChild.rotationPointZ -= parParent.rotationPointZ;
		// make rotations relative to parent
		parChild.rotateAngleX -= parParent.rotateAngleX;
		parChild.rotateAngleY -= parParent.rotateAngleY;
		parChild.rotateAngleZ -= parParent.rotateAngleZ;
		// create relationship
		parParent.addChild(parChild);
	}


}
